// TODO make file path editable
// TODO create folder for auto generated files if it does not exist
// TODO make strings const

using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text.RegularExpressions;

public class EnumVariableGenerator : EditorWindow
{
    private const string script_template_path = "Assets/ScriptableVariables/Scripts/Editor/CodeGenerators/Templates/EnumVariableTemplate.txt";
    private const string editor_template_path = "Assets/ScriptableVariables/Scripts/Editor/CodeGenerators/Templates/EnumEditorTemplate.txt";
    private const string script_dest_path = "Assets/ScriptableVariables/Scripts/Classes/AutoGenerated/Enums/{0}Variable.cs";
    private const string editor_dest_path = "Assets/ScriptableVariables/Scripts/Editor/AutoGenerated/Enums/{0}VariableEditor.cs";

    private const string header =
@"
///////////////////////////////////////////////////////////////////
/// Automatically generated by EnumVariableGenerator.cs ///////////
///////////////////////////////////////////////////////////////////
";

    private const string script_name = "{0}Variable.cs";
    private const string editor_name = "{0}VariableEditor.cs";


    private static string nameStr = "";
    private static string valuesStr = "";
    private static int numValues = 0;
    private static int defaultValue = 0;
    private static string[] lastKnownValues;

    [MenuItem("Window/Scriptable Variables/Create new Enum type")]
    public static void CreateNewEnumType()
    {
        EnumVariableGenerator window = (EnumVariableGenerator)GetWindow(typeof(EnumVariableGenerator));
        window.Show();
    }

    private void OnGUI()
    {
        GUILayout.Label("Enum Type Generator", EditorStyles.boldLabel);
        GUILayout.Space(40f);
        nameStr = EditorGUILayout.TextField("Enum Name: ", nameStr);
        GUILayout.Space(10f);
        int tmp = EditorGUILayout.IntField("Number of Values: ", numValues);

        if(tmp != numValues)
        {
            if(lastKnownValues == null)
            {
                lastKnownValues = new string[tmp];
            }
            else
            {
                string[] tmpStr = new string[tmp];
                for(int i = 0; i < ((tmp < numValues) ? tmp : numValues); ++i) {
                    tmpStr[i] = lastKnownValues[i];
                }
                lastKnownValues = tmpStr;
            }
            numValues = tmp;
        }

        for (int i = 0; i < numValues; ++i)
        {
            lastKnownValues[i] = EditorGUILayout.TextField($"{i} = ", lastKnownValues[i] ?? "");
        }
        
        GUILayout.Space(10f);
        defaultValue = EditorGUILayout.IntField("Default Value: ", defaultValue);
        if(lastKnownValues != null)
        {
            defaultValue = (defaultValue < lastKnownValues.Length) ? defaultValue : 0;
            GUILayout.Label($"({lastKnownValues[defaultValue]})");
        }


        if (GUILayout.Button("Generate Enum"))
        {
            if(!IsScriptNameValid(nameStr))
            {
                EditorUtility.DisplayDialog("Invalid Class Name", "Enum Variables should start with a letter and should only contain letters, numbers and underscores.", "Alrighty then");
                return;
            }

            valuesStr = "";

            if (lastKnownValues == null)
            {
                EditorUtility.DisplayDialog("Not enough values", "Enum variables should have at least one value.", "Alrighty then");
                return;
            }
            for(int i = 0; i < lastKnownValues.Length; ++i)
            {
                // TODO validate values
                if(!IsScriptNameValid(lastKnownValues[i]))
                {
                    EditorUtility.DisplayDialog($"Invalid Name: {lastKnownValues[i]}", "Enum Values should start with a letter and should only contain letters, numbers and underscores.", "Alrighty then");
                    return;
                }

                valuesStr += (i + 1 < lastKnownValues.Length) ? lastKnownValues[i] + ",\r\n        " : lastKnownValues[i];
            }

            try
            {
                string scriptTemplate = File.ReadAllText(script_template_path);
                string editorTemplate = File.ReadAllText(editor_template_path);

                string scriptStr = string.Format(scriptTemplate, header, nameStr, valuesStr, lastKnownValues[defaultValue]);
                string editorStr = string.Format(editorTemplate, header, nameStr);

                System.IO.FileInfo file = new FileInfo(string.Format(script_dest_path, nameStr));
                file.Directory.Create(); // If the directory already exists, this method does nothing.
                System.IO.File.WriteAllText(file.FullName, scriptStr);

                file = new FileInfo(string.Format(editor_dest_path, nameStr));
                file.Directory.Create();
                System.IO.File.WriteAllText(file.FullName, editorStr);

                EditorUtility.DisplayDialog("successfully created script and editor file", "successfully created script and editor file", "Nicenstein");
                AssetDatabase.Refresh();
            }
            catch(System.Exception e)
            {
                EditorUtility.DisplayDialog("Error", e.Message, "Sad");
            }
        }
    }

    private static bool IsScriptNameValid(string name)
    {
        // should start with a letter and can only contain numbers, letters and underscores
        Regex validName = new Regex("^[a-zA-Z]+[0-9a-zA-Z_]*$");
        return validName.IsMatch(name);
    }

    private static bool IsEnumValueValid(string name)
    {
        Regex validName = new Regex("^[a-zA-Z]+[0-9a-zA-Z_]*$");
        return validName.IsMatch(name);
    }
}