// 0: Header
// 1: Name
// 2: Enum Values
// 3: Enum Length
// 4: Bits (16 or 32)
// 5: Default Value
// 6: Backing Type

{0}

using UnityEngine;

namespace CustomLibrary.Util.ScriptableVariables
{{
    [CreateAssetMenu(menuName = "Scriptable Objects/Enum Masks/{1}")]
    public class {1}Mask : ScriptableObject
    {{
        public enum {1}
        {{
            {2}
        }}

        public delegate void ValueChangedEvent(BitMask{4} dirty);
        public event ValueChangedEvent OnValueChanged;

        [SerializeField]
        private {6}[] bms = new {6}[{3}];

        public int Length() => bms.Length;

        public {1} this[int position]
        {{
            get
            {{
                for(int i = 0; i < bms.Length; ++i)
                {{
                    BitMask{4} bm = bms[i];
                    if (bm[position]) return ({1})i;
                }}
                return {1}._{5};
            }}
            set
            {{
                BitMask{4} bm = bms[(int)value];
                if (!bm[position])
                {{
                    for(int i = 0; i < bms.Length; ++i)
                    {{
                        bm = bms[i];

                        if (i == (int)value)
                            bm[position] = true;
                        else 
                            bm[position] = false;

                        bms[i] = bm;
                    }}

                    BitMask{4} dirty = 0;
                    dirty[position] = true;
                    OnValueChanged?.Invoke(dirty);
                }}
            }}
        }}


        /// <summary>
        /// Grants access to the {6} values that are used
        /// to describe the current state of the mask.
        /// When set, invokes OnValueChanged for all enum positions
        /// that are not set to the default value.
        /// </summary>
        public {6}[] BackingField
        {{
            get => bms.Clone() as {6}[];
            set
            {{
                BitMask{4} dirty = 0;
                for (int i = 0; i < Length(); ++i)
                {{
                    BitMask{4} left = bms[i], right = value[i];
                    dirty = left.XOR(right).OR(dirty);
                }}
                bms = value;
                OnValueChanged.Invoke(dirty);
            }}
        }}

        public void SetDirty(BitMask{4} dirtyMask)
            => OnValueChanged?.Invoke(dirtyMask);

        void Reset() 
        {{
            for(int i = 0; i < bms.Length; ++i) 
            {{
                bms[i] = 0;

                if(i == (int){1}._{5})
                    bms[i] = ((BitMask{4})bms[i]).Inverse();
            }}
        }}
    }}
}}

